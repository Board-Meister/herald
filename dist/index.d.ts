// Generated by dts-bundle-generator v9.5.1

import Marshal from '@boardmeister/marshal';
import { Module, RegisterConfig } from '@boardmeister/marshal';

export type AmbiguousSubscription = string | OptionalSubscription | OptionalSubscription[] | EventHandler;
export type EventHandler = (event: CustomEvent) => Promise<any> | any;
export type Subscriptions = Record<string, AmbiguousSubscription>;
export interface Subscription {
	method: string | EventHandler;
	priority: number;
	constraint: string | Module | null;
	anchor: Node | null;
}
export interface OptionalSubscription {
	method: string | EventHandler;
	priority?: number;
	constraint?: string | Module | null;
	anchor?: Node | null;
}
export interface ISubscriberObject {
	module: ISubscriber;
	config: RegisterConfig;
}
export interface IEventRegistration {
	event: string;
	subscription: AmbiguousSubscription;
	constraint?: string | Module | null;
	sort?: boolean;
	symbol?: symbol | null;
	anchor?: Node | null;
}
export interface IListen {
	event: string;
	subscription: AmbiguousSubscription;
	anchor?: Node | null;
	symbol?: symbol | null;
	sort?: boolean;
	constraint?: string | Module | null;
}
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
export declare class _ISubscriber {
	static subscriptions: Subscriptions;
}
export type ISubscriber = typeof _ISubscriber;
export type LocalizedEventDirection = "up" | "down" | "both";
export interface IEventSettings {
	origin?: Node | null;
	direction?: LocalizedEventDirection;
}
export declare class Herald {
	#private;
	constructor(marshal?: Marshal | null);
	dispatch(event: CustomEvent, settings?: IEventSettings): Promise<void>;
	dispatchSync(event: CustomEvent, settings?: IEventSettings): void;
	batch(events: IEventRegistration[]): () => void;
	/**
	 * Wrapper method for `register`
	 * Makes is easier when you want to specify just anchor or just symbol. Thanks to that we don't have to write:
	 *
	 * `register('event', [], null, null, null, Node);`
	 *
	 * instead we can:
	 *
	 * `listen({event: 'event', subscription: [], anchor: Node});`
	 *
	 * still, using registration can result in a smaller size, so it's not completely useless.
	 */
	listen({ event, subscription, constraint, sort, symbol, anchor, }: IListen): () => void;
	register(event: string, subscription: AmbiguousSubscription, constraint?: string | Module | null, sort?: boolean, symbol?: symbol | null, anchor?: Node | null): () => void;
	unregister(event: string, symbol: symbol): void;
}

export {
	Herald as default,
};

export {};
